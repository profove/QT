*****************************************************************************************************************************************************
QT起步相关内容：

介绍及适用场景：
https://blog.csdn.net/xiaoqingyi_1014/article/details/73702297
https://blog.csdn.net/rl529014/article/details/51344881

优缺点说明：
Qt5将所有功能模块分为三部分：Qt基本模块(Qt Essentials)，Qt扩展模块(Qt Add-Ons)，Qt开发工具(Qt tools)。
为了跨平台考虑损失了部分性能，重点需要验证socket在高并发时Qt的性能问题，考虑是否需要将部分功能转为native编程另外还有移动端的性能问题，后期需要重点验证

下载地址:
https://www.qt.io/offline-installers
http://download.qt.io/archive/

qt在线教程：
http://www.qter.org/portal.php?mod=view&aid=26
http://www.qter.org/thread-629-1-1.html

qt 5 api doc:
http://doc.qt.io/qt-5/classes.html

qt框架的大致思路：
https://blog.csdn.net/amwha/article/details/73928281

qt编程规范：
https://wiki.qt.io/Qt_Coding_Style
https://wiki.qt.io/Coding_Conventions


*****************************************************************************************************************************************************
qt常用类说明：

1、QString
转换字符串使用导致异常问题，样例如下：
QString str = "string";
const char* c = str.toStdString().c_str()单步调试显示的结果可能会是'\0'
而按照如下写法：
std::string s = str.toStdString(); 
const char* c = s.c_str();
c是"string"
由于str.toStdString().c_str()中toStdString()是一个临时std::string变量，而c_str()是指向这个临时std::string变量的字符串地址，所以传给c时这个临时std::string变量已经被析构，其内容是空，c_str()自然就是'\0'。不过这种情况在分步使用的情况下才会发生，一般使用可以直接写QString::toStdString().c_str()也可以。
隐式共享：两个对象共享同一份数据，如果数据不变用浅拷贝，改变数据时执行深拷贝

2、QList
注意效率和存储内容的有效性
注意需要存储的是指针还是对象本身

3、QLinkedList
注意效率、迭代器访问

4、QVector
注意效率

5、QVariant类似union
能够保存的类型较多

6、QRegExp正则表达式
表达式、量词、断言

7、QPushButton QDateTime QTimer

8、QWidget
QWidget经常用作其他widget的容器

9、QDockWidget
https://blog.csdn.net/founderznd/article/details/51414259

10、各类布局管理器使用说明
https://blog.csdn.net/qq_29344757/article/details/77949119

*****************************************************************************************************************************************************
其他参考资料：

qt network programming:
https://blog.csdn.net/y____xiang/article/details/80398913
套接字连接前先做如下设置：
m_socket->setProxy(QNetworkProxy::NoProxy);

qt多线程编程：
https://www.cnblogs.com/senior-engineer/p/6185814.html

qt中文显示问题：
QT中还有2个概念非常重要：
1、源码字符集(the source character set)	源码文件是使用何种编码保存的
2、执行字符集(the execution character set)	可执行程序内保存的是何种编码(程序执行时内存中字符串编码)
Qt5假定的执行字符集是UTF8，不再允许用户擅自改动。这样一来，Qt4中setCodecXXX的各种副作用不再存在，而且中文问题更为简单
QString::fromUtf8("这是汉字");//在源代码为UTF8时使用
QString::fromLocal8Bit("这是汉字")//在本地编码转为UTF8时使用
建议采用下面的宏解决办法：
#define TR(str)   (QString::fromLocal8Bit(str))  //解决中文乱码

qt信号槽：
qt4语法的信号槽检查是在运行期，qt5的语法在编译期检查

qt对象状态调试：
可以使用 QObject::dumpObjectTree() 和 QObject::dumpObjectInfo() 这两个函数进行这方面的调试。
在 Qt 中，尽量在构造的时候就指定 parent 对象，并且大胆在堆上创建

qtcreator快捷键
https://blog.csdn.net/desert187/article/details/23996821

图标下载：
https://www.easyicon.net/


*****************************************************************************************************************************************************
FAQ：

1、在QMainWindow内直接添加Layout行不通
因为这个窗口类中，已经有了一个Layout对象了，这时候，当你再setLayout的时候，就是无效的，这是有三个办法，一个办法是调用layout()方法，返回这个窗口内部的Layout的对象，然后删除它，再调用setLayout设置自己的Layout对象，还有一个办法，就是直接使用这个窗口内部的Layout对象，第三个方法，就是直接创建其子窗口，在这个子窗口中使用Layout对象，如，在QMainWindow中，我们通常创建一个继承于QWidget的窗口对象，然后调用setCentralWidget方法来安装这个窗口，然后在这个窗口中使用自己的Layout。
QWidget* widget = new QWidget(this);
widget->setLayout(gridLayout);
this->setCentralWidget(widget);

2、QWidget的子类调用show()方法不能显示：
“Non-window widgets are child widgets, displayed within their parent widgets.”，就是“非窗口的部件是子部件，显示在它们的父部件中”
解决方法：一开始我把继承的父类从QWidget改成QDialog，发现没有什么问题。不过在原来的类的基础上，加入setWindowFlags(Qt::Window)这句到它的构造函数里面就行了，让它以窗口显示，这样改动就很小了。

3、经常发现使用qt自带类的返回字符串会导致程序异常
如果需要使用到返回字符串的，先拷贝出来再使用，自带类返回的是临时对象

4、QMenuBar()、QMenu()和QAction()的使用
https://blog.csdn.net/founderznd/article/details/51407909

5、QT打包发布程序
利用Qt Creator自带的windeployqt 工具，是非常的方便的，只要新建一个testname，将release版本的可执行文件xxx.exe放到这个新建文件夹testname中，然后打开在开始菜单—>Qt 5.3—>MinGW 4.8 (32-bit)—>Qt 5.3 for Desktop (MinGW 4.8 32 bit)的命令窗口： 
在命令窗口中输入：windeployqt xxx.exe，回车。即可将所有需要的dll动态库文件拷贝到testname文件夹中

6、qt信号和事件的区别
事件返回值有意义，信号返回值无意义。事件处理函数如果返回true，则这个事件处理已完成，QApplication会接着处理下一个事件，而如果返回false，那么事件分派函数会继续向上寻找下一个可以处理该事件的注册方法。
执行方式不同：事件使用了一个事件队列来维护，如果事件的处理中又产生了新的事件，那么新的事件会加入到队列尾，直到当前事件处理完毕后， QApplication再去队列头取下一个事件来处理。而信号的处理方式有些不同，信号处理是立即回调的，也就是一个信号产生后，他上面所注册的所有槽都会立即被回调。这样就会产生一个递归调用的问题，比如某个信号处理器中又产生了一个信号，会使得信号的处理像一棵树一样的展开。

7、QT中几乎所有类都支持隐式共享
两个对象共享同一份数据，如果数据不变用浅拷贝，改变数据时执行深拷贝

8、简单设置全局程序图标
打开项目文件如helloworld.pro，在最下面添加一行代码：
RC_ICONS = myico.ico

9、信号与事件的区别
https://www.cnblogs.com/weizhixiang/p/5861138.html

10、QT布局管理器
布局管理器不是界面组件，而是界面部件的定位策略，QBoxLayout	QGridLayout	QFormLayout	QStackedLayout这几个类都继承自QLayout
QVBoxLayout：界面跟着变大的时候，这几个按钮也会随着变化，但仅仅只是宽度的变化，而按钮的高度不会随着主窗口的变化而变化，需要用到QSizePolicy类，继承自QWidget，因为QWidget是基类，这个类我们可以在Qt的帮助文档中详细的看，大概的意思就是一个大小的策略，是当有布局管理器存在的时候起作用。当布局管理器时这个QSizePolicy类的大小的策略，就会被布局管理器所使用。大小策略的函数是setSizePolicy();
addStretch(1);布局管理器添加弹簧
addSpacing(50);组件之间添加固定像素间隔

11、QDockWidget窗口状态恢复不了
需要设置各个dock窗体的objectname，否则代码不生效
dock->setObjectName("dock1");
QObject.setObjectName可以用来设置对象的名称，方便后续查找，如下所示：
QLabel *macLabel = yourWidget->findChild<QLabel *>("mac");

12、

*****************************************************************************************************************************************************
常用QT代码片段：
1、测算程序块执行时间：
qint64 timestamp = QDateTime::currentDateTime().toMSecsSinceEpoch();
qint64 now = QDateTime::currentDateTime().toMSecsSinceEpoch();
qDebug()<<now - timestamp;

2、QT恢复窗口状态
//关闭前保存状态
void MainWindow::closeEvent(QCloseEvent *event)
{
    QSettings settings("SFIT", "RCWin");
    settings.setValue("geometry", saveGeometry());
    settings.setValue("windowState", saveState());

}

//恢复状态
    QSettings settings("SFIT", "RCWin");
    restoreGeometry(settings.value("geometry").toByteArray());
    restoreState(settings.value("windowState").toByteArray());
注意事项：
QDockWidget窗口状态恢复需要设置各个dock窗体的objectname，否则代码不生效，切记
dock->setObjectName("dock1");

3、

*****************************************************************************************************************************************************
待解决的faq：
1、如何测量信号槽调用的时间损耗



*****************************************************************************************************************************************************



